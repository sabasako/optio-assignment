services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: optio-redis
    ports:
      - '${REDIS_PORT_HOST:-6379}:6379'
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - optio-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: optio-rabbitmq
    ports:
      - '${RABBITMQ_PORT_HOST:-5672}:5672'
      - '${RABBITMQ_MANAGEMENT_PORT_HOST:-15672}:15672'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - optio-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: optio-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms512m -Xmx512m}
    ports:
      - '${ELASTICSEARCH_PORT_HOST:-9200}:9200'
      - '${ELASTICSEARCH_TRANSPORT_PORT_HOST:-9300}:9300'
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - optio-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: optio-kibana
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_NODE:-http://elasticsearch:9200}
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - '${KIBANA_PORT_HOST:-5601}:5601'
    volumes:
      - kibana-data:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:5601/api/status || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - optio-network
    restart: unless-stopped

  # Application Services
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: api-gateway
    container_name: optio-api-gateway
    ports:
      - '${API_GATEWAY_PORT_HOST:-3000}:${API_GATEWAY_PORT_INTERNAL:-3000}'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${API_GATEWAY_PORT_INTERNAL:-3000}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-admin}
      - ELASTICSEARCH_NODE=${ELASTICSEARCH_NODE:-http://elasticsearch:9200}
      - WEBSOCKET_URL=${WEBSOCKET_URL:-http://websocket-service:3003}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - optio-network
    restart: unless-stopped

  scheduler-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: scheduler-service
    container_name: optio-scheduler-service
    ports:
      - '${SCHEDULER_PORT_HOST:-3001}:${SCHEDULER_PORT_INTERNAL:-3001}'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${SCHEDULER_PORT_INTERNAL:-3001}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-admin}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - optio-network
    restart: unless-stopped

  worker-service-1:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: worker-service
    container_name: optio-worker-service-1
    ports:
      - '${WORKER_1_PORT_HOST:-3002}:${WORKER_PORT_INTERNAL:-3002}'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${WORKER_PORT_INTERNAL:-3002}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-admin}
      - ELASTICSEARCH_NODE=${ELASTICSEARCH_NODE:-http://elasticsearch:9200}
      - WEBSOCKET_URL=${WEBSOCKET_URL:-http://websocket-service:3003}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - optio-network
    restart: unless-stopped

  worker-service-2:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: worker-service
    container_name: optio-worker-service-2
    ports:
      - '${WORKER_2_PORT_HOST:-3004}:${WORKER_PORT_INTERNAL:-3002}'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${WORKER_PORT_INTERNAL:-3002}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-admin}
      - ELASTICSEARCH_NODE=${ELASTICSEARCH_NODE:-http://elasticsearch:9200}
      - WEBSOCKET_URL=${WEBSOCKET_URL:-http://websocket-service:3003}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - optio-network
    restart: unless-stopped

  websocket-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: websocket-service
    container_name: optio-websocket-service
    ports:
      - '${WEBSOCKET_PORT_HOST:-3003}:${WEBSOCKET_PORT_INTERNAL:-3003}'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${WEBSOCKET_PORT_INTERNAL:-3003}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-admin}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:4200}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - optio-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: optio-frontend
    ports:
      - '${FRONTEND_PORT_HOST:-4200}:80'
    depends_on:
      - api-gateway
      - websocket-service
    networks:
      - optio-network
    restart: unless-stopped

networks:
  optio-network:
    driver: bridge

volumes:
  redis-data:
  rabbitmq-data:
  elasticsearch-data:
  kibana-data:
